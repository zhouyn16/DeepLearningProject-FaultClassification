###预定义
train_each=1000
test_each=1000

###重复取样
repeat=60
###

###mixup次数
mixup_num=3
###

###高斯噪音方差
var=0.01
gauss_num=1
###

###随机数
randomint=rd.randint(0,15000)
###

def preprocess(table):
    post_table=table.values.astype('float32')
    post_table=(post_table-np.mean(post_table,axis=1).reshape(-1,1))/np.std(post_table,axis=1).reshape(-1,1)
    post_table=pd.DataFrame(post_table,columns=table.columns)
    return post_table

def evaluate(X_pred_label,y_test_label):
    end=pd.DataFrame(columns=['recall','precision','F_score'])
    for i in range(10):
        TP=np.sum(np.array(X_pred_label==i)*np.array(y_test_label==i))
        FP=np.sum(np.array(X_pred_label==i)*np.array(y_test_label!=i))
        FN=np.sum(np.array(X_pred_label!=i)*np.array(y_test_label==i))
        precise=TP/(TP+FP)
        recall=TP/(TP+FN)
        end.loc[i]=np.array([recall,precise,2*precise*recall/(precise+recall)])
    return end
    
def ROC_curve(name,y,y_score):
    fpr, tpr, thresholds = metrics.roc_curve(y,y_score)
    roc_auc=metrics.auc(fpr, tpr)
    plt.clf()
    plt.plot(fpr, tpr, label='ROC curve (area = %0.2f)' % roc_auc)
    plt.plot([0, 1], [0, 1], 'k--')
    plt.xlim([0.0, 1.0])
    plt.ylim([0.0, 1.0])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.legend(loc="lower right")
    plt.savefig('%s_ROC.png'%name)
    plt.show()
